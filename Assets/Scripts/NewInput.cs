//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/NewInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""cf0148e9-6128-4c3d-a668-63878b4a5d8e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e48bcb0d-6f82-4ed7-b12a-463be9d1a67c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDeltaX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c5619c17-dd2b-43bf-aa45-ff4106fcedb3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDeltaY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""015262d5-53a7-411b-9611-96f282a12a3d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseClickLeftButton"",
                    ""type"": ""Button"",
                    ""id"": ""a4633004-79b9-4300-a4e4-4c4046aec7f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseClickRightButton"",
                    ""type"": ""Button"",
                    ""id"": ""513d9b8e-5561-4b5b-9f89-d94b5ee9d9fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2b66628d-fc6d-432b-9b88-72539f10323d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KeyboardF"",
                    ""type"": ""Button"",
                    ""id"": ""bca8a1d9-69bd-4795-bf0a-1c0d5b8bbb1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""852de033-6f0d-48aa-aaee-ccf1c8b18d73"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0a026e31-19fa-4ddd-ae0d-eee63e11db80"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fc8f00f3-a713-4936-8a99-6939f702d652"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""74216081-1918-4c3e-aff1-7050a2d298c0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""0d17df20-acb2-4cc8-abc0-13df89361f6c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4d013b43-7ff8-4b77-90ac-def9c198a412"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDeltaX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""603076be-5967-4790-bffc-454a92b0639e"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDeltaY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f50a86d3-3f8b-4c24-b3b5-341ab6d7a8ec"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClickLeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d71ec3fa-7989-4c63-9c4b-d7f1afb0a2fa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClickRightButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3648b455-92bb-45ab-b791-f221d64832fa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93aa8424-f35c-4b51-a9d0-31b28693422b"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardF"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
        m_Gameplay_MouseDeltaX = m_Gameplay.FindAction("MouseDeltaX", throwIfNotFound: true);
        m_Gameplay_MouseDeltaY = m_Gameplay.FindAction("MouseDeltaY", throwIfNotFound: true);
        m_Gameplay_MouseClickLeftButton = m_Gameplay.FindAction("MouseClickLeftButton", throwIfNotFound: true);
        m_Gameplay_MouseClickRightButton = m_Gameplay.FindAction("MouseClickRightButton", throwIfNotFound: true);
        m_Gameplay_Jump = m_Gameplay.FindAction("Jump", throwIfNotFound: true);
        m_Gameplay_KeyboardF = m_Gameplay.FindAction("KeyboardF", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Movement;
    private readonly InputAction m_Gameplay_MouseDeltaX;
    private readonly InputAction m_Gameplay_MouseDeltaY;
    private readonly InputAction m_Gameplay_MouseClickLeftButton;
    private readonly InputAction m_Gameplay_MouseClickRightButton;
    private readonly InputAction m_Gameplay_Jump;
    private readonly InputAction m_Gameplay_KeyboardF;
    public struct GameplayActions
    {
        private @NewInput m_Wrapper;
        public GameplayActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        public InputAction @MouseDeltaX => m_Wrapper.m_Gameplay_MouseDeltaX;
        public InputAction @MouseDeltaY => m_Wrapper.m_Gameplay_MouseDeltaY;
        public InputAction @MouseClickLeftButton => m_Wrapper.m_Gameplay_MouseClickLeftButton;
        public InputAction @MouseClickRightButton => m_Wrapper.m_Gameplay_MouseClickRightButton;
        public InputAction @Jump => m_Wrapper.m_Gameplay_Jump;
        public InputAction @KeyboardF => m_Wrapper.m_Gameplay_KeyboardF;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @MouseDeltaX.started += instance.OnMouseDeltaX;
            @MouseDeltaX.performed += instance.OnMouseDeltaX;
            @MouseDeltaX.canceled += instance.OnMouseDeltaX;
            @MouseDeltaY.started += instance.OnMouseDeltaY;
            @MouseDeltaY.performed += instance.OnMouseDeltaY;
            @MouseDeltaY.canceled += instance.OnMouseDeltaY;
            @MouseClickLeftButton.started += instance.OnMouseClickLeftButton;
            @MouseClickLeftButton.performed += instance.OnMouseClickLeftButton;
            @MouseClickLeftButton.canceled += instance.OnMouseClickLeftButton;
            @MouseClickRightButton.started += instance.OnMouseClickRightButton;
            @MouseClickRightButton.performed += instance.OnMouseClickRightButton;
            @MouseClickRightButton.canceled += instance.OnMouseClickRightButton;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @KeyboardF.started += instance.OnKeyboardF;
            @KeyboardF.performed += instance.OnKeyboardF;
            @KeyboardF.canceled += instance.OnKeyboardF;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @MouseDeltaX.started -= instance.OnMouseDeltaX;
            @MouseDeltaX.performed -= instance.OnMouseDeltaX;
            @MouseDeltaX.canceled -= instance.OnMouseDeltaX;
            @MouseDeltaY.started -= instance.OnMouseDeltaY;
            @MouseDeltaY.performed -= instance.OnMouseDeltaY;
            @MouseDeltaY.canceled -= instance.OnMouseDeltaY;
            @MouseClickLeftButton.started -= instance.OnMouseClickLeftButton;
            @MouseClickLeftButton.performed -= instance.OnMouseClickLeftButton;
            @MouseClickLeftButton.canceled -= instance.OnMouseClickLeftButton;
            @MouseClickRightButton.started -= instance.OnMouseClickRightButton;
            @MouseClickRightButton.performed -= instance.OnMouseClickRightButton;
            @MouseClickRightButton.canceled -= instance.OnMouseClickRightButton;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @KeyboardF.started -= instance.OnKeyboardF;
            @KeyboardF.performed -= instance.OnKeyboardF;
            @KeyboardF.canceled -= instance.OnKeyboardF;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnMouseDeltaX(InputAction.CallbackContext context);
        void OnMouseDeltaY(InputAction.CallbackContext context);
        void OnMouseClickLeftButton(InputAction.CallbackContext context);
        void OnMouseClickRightButton(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnKeyboardF(InputAction.CallbackContext context);
    }
}
